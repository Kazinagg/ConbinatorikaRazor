@page "/l7"
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS

<div class="container mt-5">
    <h3 class="mb-4">Демонстрация алгоритмов сжатия</h3>

    <!-- Выбор режима -->
    <div class="mb-3">
        <label class="form-label">Выберите режим:</label>
        <div>
            <input type="radio" id="encoding" value="Encoding" @onchange="(e) => Mode = e.Value.ToString()" checked="@IsEncodingChecked" />
            <label for="encoding">Кодировка</label>
        </div>
        <div>
            <input type="radio" id="decoding" value="Decoding" @onchange="(e) => Mode = e.Value.ToString()" checked="@IsDecodingChecked" />
            <label for="decoding">Декодировка</label>
        </div>
    </div>

    <!-- Ввод текста -->
    @if (Mode == "Encoding")
    {
        <div class="mb-3">
            <label for="inputText" class="form-label">Введите текст:</label>
            <textarea id="inputText" class="form-control" @bind="InputText" rows="5"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Или загрузите файл:</label>
            <InputFile OnChange="LoadFromFile" class="form-control" />
        </div>

        <!-- Выбор алгоритма -->
        <div class="mb-3">
            <label for="algorithm" class="form-label">Выберите алгоритм:</label>
            <select id="algorithm" class="form-select" @bind="SelectedAlgorithm">
                <option value="ShannonFano">Код Шеннона-Фано</option>
                <option value="Huffman">Код Хаффмана</option>
            </select>
        </div>
    }
    else if (Mode == "Decoding")
    {
        <div class="mb-3">
            <label for="inputText" class="form-label">Введите сжатый текст:</label>
            <textarea id="inputText" class="form-control" @bind="InputText" rows="5"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Или загрузите файл:</label>
            <InputFile OnChange="LoadFromFile" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Загрузить ключи:</label>
            <InputFile OnChange="LoadKeysFromFile" class="form-control" />
        </div>
    }

    

    <!-- Кнопки действий -->
    @if (Mode == "Encoding")
    {
        <button class="btn btn-primary me-2" @onclick="Compress">Сжать</button>
        <button class="btn btn-secondary me-2" @onclick="SaveToFile">Сохранить битовый результат</button>
        <button class="btn btn-warning me-2" @onclick="SaveBitSequenceAsText">Сохранить сжатый текст</button>
        <button class="btn btn-secondary" @onclick="SaveKeysToFile">Сохранить ключи</button>
    }
    else if (Mode == "Decoding")
    {
        <button class="btn btn-success me-2" @onclick="Decode">Декодировать</button>
    }

    <!-- Результат -->
    <div class="mt-4">
        <h4>Результат:</h4>
        <textarea readonly class="form-control" rows="5">@ResultText</textarea>
    </div>

    <!-- Дерево кодирования -->
    @if (Mode == "Encoding")
    {
        <div class="mt-4">
            <h4>Дерево кодирования:</h4>
            <pre style="font-family: monospace;">@TreeVisualization</pre>
        </div>
    }
</div>


<script>
    function saveFile(filename, content) {
        const blob = new Blob([content], { type: 'text/plain' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

@code {
    private string Mode = "Encoding"; // Переменная для управления режимом

    private bool IsEncodingChecked => Mode == "Encoding";
    private bool IsDecodingChecked => Mode == "Decoding";
    private string InputText = string.Empty;
    private string ResultText = string.Empty;
    private string TreeVisualization = string.Empty;
    private string SelectedAlgorithm = "ShannonFano";
    private Dictionary<char, string> EncodingKeys = new();
    private Dictionary<string, char> DecodingKeys = new();

    private async Task LoadFromFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            InputText = await reader.ReadToEndAsync();
        }
    }

    private void Compress()
    {
        if (string.IsNullOrEmpty(InputText))
        {
            ResultText = "Введите текст или загрузите файл!";
            return;
        }

        if (SelectedAlgorithm == "ShannonFano")
        {
            (ResultText, TreeVisualization) = ShannonFanoEncode(InputText);
        }
        else if (SelectedAlgorithm == "Huffman")
        {
            (ResultText, TreeVisualization) = HuffmanEncode(InputText);
        }
    }

    private async Task SaveToFile()
    {
        if (string.IsNullOrWhiteSpace(ResultText))
        {
            return;
        }

        var fileName = $"{SelectedAlgorithm}_result.txt";
        await JS.InvokeVoidAsync("saveFile", fileName, ResultText);
    }

    private (string, string) ShannonFanoEncode(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return ("", "Входной текст пуст.");
        }

        // Считаем частоты символов
        var frequencies = input.GroupBy(c => c)
            .ToDictionary(g => g.Key, g => g.Count())
            .OrderByDescending(x => x.Value);

        // Построение кодов
        var codes = new Dictionary<char, string>();
        BuildShannonFanoCodes(frequencies.ToList(), codes, "");

        // Кодируем текст
        var encodedText = string.Concat(input.Select(c => codes[c]));

        // Генерация дерева в строковом формате
        var tree = string.Join(Environment.NewLine, codes.Select(kvp => $"{kvp.Key}: {kvp.Value}"));

        EncodingKeys = new Dictionary<char, string>();
        BuildShannonFanoCodes(frequencies.ToList(), EncodingKeys, "");
        DecodingKeys = EncodingKeys.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);

        return (encodedText, tree);
    }

    private void BuildShannonFanoCodes(List<KeyValuePair<char, int>> frequencies, Dictionary<char, string> codes, string prefix)
    {
        if (frequencies.Count == 1)
        {
            codes[frequencies[0].Key] = prefix;
            return;
        }

        // Разделение на две группы
        int totalFrequency = frequencies.Sum(x => x.Value);
        int halfFrequency = totalFrequency / 2;

        int runningTotal = 0;
        int splitIndex = 0;
        for (int i = 0; i < frequencies.Count; i++)
        {
            runningTotal += frequencies[i].Value;
            if (runningTotal >= halfFrequency)
            {
                splitIndex = i + 1;
                break;
            }
        }

        BuildShannonFanoCodes(frequencies.Take(splitIndex).ToList(), codes, prefix + "0");
        BuildShannonFanoCodes(frequencies.Skip(splitIndex).ToList(), codes, prefix + "1");
    }





    private class Node
    {
        public char? Symbol { get; set; } // Символ (null для промежуточных узлов)
        public int Frequency { get; set; } // Частота символа
        public Node Left { get; set; } // Левый потомок
        public Node Right { get; set; } // Правый потомок
        public Guid Id { get; } = Guid.NewGuid(); // Уникальный идентификатор узла
    }

    public (string EncodedText, string TreeRepresentation) HuffmanEncode(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            throw new ArgumentException("Входной текст пуст.");
        }

        // Подсчёт частот символов
        var frequencies = input.GroupBy(c => c)
                               .ToDictionary(g => g.Key, g => g.Count());

        // Очередь с приоритетами
        var priorityQueue = new SortedSet<Node>(Comparer<Node>.Create((a, b) =>
        {
            int freqCompare = a.Frequency.CompareTo(b.Frequency);
            if (freqCompare != 0) return freqCompare;

            return a.Id.CompareTo(b.Id); // Уникальное сравнение
        }));

        foreach (var kvp in frequencies)
        {
            priorityQueue.Add(new Node { Symbol = kvp.Key, Frequency = kvp.Value });
        }

        // Построение дерева Хаффмана
        while (priorityQueue.Count > 1)
        {
            var left = priorityQueue.Min;
            priorityQueue.Remove(left);
            var right = priorityQueue.Min;
            priorityQueue.Remove(right);

            var parent = new Node
                {
                    Frequency = left.Frequency + right.Frequency,
                    Left = left,
                    Right = right,
                    Symbol = null // Промежуточный узел не имеет символа
                };

            priorityQueue.Add(parent);
        }

        var root = priorityQueue.Min; // Корень дерева

        // Генерация кодов
        EncodingKeys = new Dictionary<char, string>();
        GenerateHuffmanCodes(root, "", EncodingKeys);

        // Обратные ключи для декодирования
        DecodingKeys = EncodingKeys.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);

        // Кодирование текста
        var encodedText = string.Concat(input.Select(c => EncodingKeys[c]));

        // Построение дерева для отображения
        string treeRepresentation = GetTreeRepresentation(root);

        return (encodedText, treeRepresentation);
    }


    private void GenerateHuffmanCodes(Node node, string code, Dictionary<char, string> codes)
    {
        if (node == null) return;

        // Если узел — это лист
        if (node.Left == null && node.Right == null && node.Symbol.HasValue)
        {
            codes[node.Symbol.Value] = code;
            return;
        }

        GenerateHuffmanCodes(node.Left, code + "0", codes);
        GenerateHuffmanCodes(node.Right, code + "1", codes);
    }

    private string GetTreeRepresentation(Node node, string indent = "", bool isLast = true, Dictionary<char, string> codes = null)
    {
        if (node == null) return "";

        string result = $"{indent}{(isLast ? "└──" : "├──")}";

        string code = "";
        if (codes != null && node.Symbol.HasValue)
        {
            if (codes.TryGetValue(node.Symbol.Value, out code))
            {
                // Add code to the output
                result += $"'{node.Symbol}' ({node.Frequency}): {code}\n";
            }
            else
            {
                result += $"'{node.Symbol}' ({node.Frequency})\n"; // Handle cases where the symbol might not be in the codes dictionary
            }
        }
        else
        {
            result += $"* ({node.Frequency})\n";
        }



        indent += isLast ? "    " : "│   ";

        result += GetTreeRepresentation(node.Left, indent, false, codes);
        result += GetTreeRepresentation(node.Right, indent, true, codes);

        return result;
    }


    private void Decode()
    {
        if (string.IsNullOrEmpty(InputText) || DecodingKeys.Count == 0)
        {
            ResultText = "Введите сжатый текст и загрузите ключи!";
            return;
        }

        // Преобразуем входной текст в последовательность бит
        var bitSequence = ConvertTextToBits(InputText);

        var decodedText = new StringBuilder();
        var currentCode = string.Empty;

        foreach (var bit in bitSequence)
        {
            currentCode += bit;
            if (DecodingKeys.TryGetValue(currentCode, out var symbol))
            {
                decodedText.Append(symbol);
                currentCode = string.Empty;
            }
        }

        ResultText = decodedText.ToString();
    }


    private async Task LoadKeysFromFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        var keysContent = await reader.ReadToEndAsync();

        DecodingKeys = keysContent
            .Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries)
            .ToDictionary(
                line => line.Split(':')[1],
                line => line.Split(':')[0][0]);
    }

    private async Task SaveKeysToFile()
    {
        if (EncodingKeys.Count == 0)
        {
            return;
        }

        var keysContent = string.Join(Environment.NewLine, EncodingKeys.Select(kvp => $"{kvp.Key}:{kvp.Value}"));
        await JS.InvokeVoidAsync("saveFile", "keys.txt", keysContent);
    }

    private async Task SaveBitSequenceAsText()
    {
        if (string.IsNullOrEmpty(ResultText))
        {
            ResultText = "Нет данных для сохранения!";
            return;
        }

        // Преобразуем биты в текст
        var bitSequence = ConvertBitsToText(ResultText);

        var fileName = Mode == "Encoding" ? "encoded_as_text.txt" : "decoded_as_text.txt";
        await JS.InvokeVoidAsync("saveFile", fileName, bitSequence);
    }

    private string ConvertBitsToText(string bitSequence)
    {
        var builder = new StringBuilder();

        for (int i = 0; i < bitSequence.Length; i += 8)
        {
            var byteStr = bitSequence.Substring(i, Math.Min(8, bitSequence.Length - i));
            byteStr = byteStr.PadRight(8, '0'); // Дополняем нулями, если меньше 8 бит
            var symbol = (char)Convert.ToInt32(byteStr, 2);
            builder.Append(symbol);
        }

        return builder.ToString();
    }

    private string ConvertTextToBits(string text)
    {
        var builder = new StringBuilder();

        foreach (var symbol in text)
        {
            var byteValue = (byte)symbol; // Преобразуем символ в его байтовое представление
            var bitString = Convert.ToString(byteValue, 2).PadLeft(8, '0'); // Преобразуем в строку бит, дополняя до 8 бит
            builder.Append(bitString);
        }

        return builder.ToString();
    }

}
